yarn run v1.22.18
$ mocha ./test/current/test/* ./test/legacy/test/*


  nativize (ethers format)
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
No memo provider
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    },
    send: [Function] {
      [length]: 2,
      [name]: '',
      [arguments]: null,
      [caller]: null,
      [prototype]: { [constructor]: [Circular] }
    },
    _alreadyWrapped: true
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-E2bPn2xF5Mfr',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  logger: {
    log: [Function: log] { [length]: 0, [name]: 'log' },
    warn: [Function: warn] { [length]: 0, [name]: 'warn' },
    dir: [Function: dir] { [length]: 0, [name]: 'dir' },
    time: [Function: time] { [length]: 0, [name]: 'time' },
    timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
    timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
    trace: [Function: trace] { [length]: 0, [name]: 'trace' },
    assert: [Function: assert] { [length]: 0, [name]: 'assert' },
    clear: [Function: clear] { [length]: 0, [name]: 'clear' },
    count: [Function: count] { [length]: 0, [name]: 'count' },
    countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
    group: [Function: group] { [length]: 0, [name]: 'group' },
    groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
    table: [Function: table] { [length]: 0, [name]: 'table' },
    debug: [Function: debug] { [length]: 0, [name]: 'debug' },
    info: [Function: info] { [length]: 0, [name]: 'info' },
    dirxml: [Function: dirxml] { [length]: 0, [name]: 'dirxml' },
    error: [Function: error] { [length]: 0, [name]: 'error' },
    groupCollapsed: [Function: groupCollapsed] { [length]: 0, [name]: 'groupCollapsed' },
    [_stdout]: [Getter/Setter],
    [_stderr]: [Getter/Setter],
    [_stdoutErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_stderrErrorHandler]: [Function] { [length]: 1, [name]: '' },
    [_ignoreErrors]: true,
    [_times]: Map {},
    Console: [Function: Console] {
      [length]: 1,
      [name]: 'Console',
      [prototype]: Console {
        [constructor]: [Circular],
        log: [Function: log] { [length]: 0, [name]: 'log' },
        warn: [Function: warn] { [length]: 0, [name]: 'warn' },
        dir: [Function: dir] { [length]: 2, [name]: 'dir' },
        time: [Function: time] { [length]: 0, [name]: 'time' },
        timeEnd: [Function: timeEnd] { [length]: 0, [name]: 'timeEnd' },
        timeLog: [Function: timeLog] { [length]: 0, [name]: 'timeLog' },
        trace: [Function: trace] {
          [length]: 0,
          [name]: 'trace',
          [prototype]: [trace]
        },
        assert: [Function: assert] { [length]: 1, [name]: 'assert' },
        clear: [Function: clear] { [length]: 0, [name]: 'clear' },
        count: [Function: count] { [length]: 0, [name]: 'count' },
        countReset: [Function: countReset] { [length]: 0, [name]: 'countReset' },
        group: [Function: group] { [length]: 0, [name]: 'group' },
        groupEnd: [Function: groupEnd] { [length]: 0, [name]: 'groupEnd' },
        table: [Function: table] { [length]: 2, [name]: 'table' },
        debug: [Function: log] { [length]: 0, [name]: 'log' },
        info: [Function: log] { [length]: 0, [name]: 'log' },
        dirxml: [Function: log] { [length]: 0, [name]: 'log' },
        error: [Function: warn] { [length]: 0, [name]: 'warn' },
        groupCollapsed: [Function: group] { [length]: 0, [name]: 'group' },
        [Symbol(kBindStreamsEager)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindStreamsLazy)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kBindProperties)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kWriteToConsole)]: [Function: value] {
          [length]: 2,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kGetInspectOptions)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStdout)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        },
        [Symbol(kFormatForStderr)]: [Function: value] {
          [length]: 1,
          [name]: 'value',
          [prototype]: [value]
        }
      },
      [Symbol(Symbol.hasInstance)]: [Function: value] { [length]: 1, [name]: 'value' }
    },
    profile: [Function: profile] { [length]: 0, [name]: 'profile' },
    profileEnd: [Function: profileEnd] { [length]: 0, [name]: 'profileEnd' },
    timeStamp: [Function: timeStamp] { [length]: 0, [name]: 'timeStamp' },
    context: [Function: context] { [length]: 1, [name]: 'context' },
    [Symbol(kBindStreamsEager)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kBindStreamsLazy)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kBindProperties)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kWriteToConsole)]: [Function: value] { [length]: 2, [name]: 'value' },
    [Symbol(kGetInspectOptions)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStdout)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(kFormatForStderr)]: [Function: value] { [length]: 1, [name]: 'value' },
    [Symbol(counts)]: Map {},
    [Symbol(kColorMode)]: 'auto',
    [Symbol(kIsConsole)]: true,
    [Symbol(kGroupIndent)]: '',
    [Symbol(kGroupIndentWidth)]: 2,
    [Symbol(Symbol.toStringTag)]: 'console'
  },
  verbose: false,
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    ✓ should compatibly nativize return values and event arguments (259ms)

  State variable decoding
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-hFdQbGWUjam3',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    ✓ should get the initial state properly (163ms)
    ✓ should spawn decoders based on address alone (116ms)

  Graceful degradation when information is missing
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-SSMI87VWMK6M',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    1) Correctly degrades on allocation when no node
    2) Correctly degrades on allocation when error
    3) Correctly degrades on decoding when error
    4) Correctly abifies after finishing
    5) Correctly decodes decimals
    6) Correctly decodes inherited events when no node
    ✓ Decodes external functions via additionalContexts (144ms)
    7) Decodes transactions sent to the instance via additionalContexts
    ✓ Partially decodes internal functions when unreliable order (112ms)
    8) Decodes return values even with no deployedBytecode
    Out-of-range enums
      9) Doesn't include out-of-range enums in full mode
      10) Abifies correctly when failure occurs in first enum
      11) Abifies correctly when failure occurs in second enum
    Custom errors
      12) Degrades correctly when no node
      13) Degrades correctly when no usedErrors
      14) Degrades correctly on no error node
      15) Degrades correctly on error

  Non-function transactions
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-ckv3XAqDWDF2',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    16) should decode transactions that invoke fallback or receive

  Over-the-wire decoding
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/current',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-2AbfBpvZOo6o',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/current/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    17) should correctly decode transactions and events
    18) disambiguates events when possible and not when impossible
    19) Handles anonymous events
    20) respects the extras option
    21) Decodes return values
    22) Decodes return values when given superclass
    Custom error decoding
      23) Decodes unambiguous custom errors
      24) Decodes unambiguous custom errors from external calls
      25) Decodes ambiguous custom errors
      26) Decodes ambiguous custom errors from external calls

  Shadowed storage variables
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-U1gMz9TbP5yD',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    ✓ Includes shadowed storage variables in variables
    ✓ Fetches variables by name or qualified name

  Over-the-wire decoding (legacy features)
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: '*',
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  }
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: false,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
{
  provider: EthereumProvider {
    debug: { enabled: false, logger: [Function] { [length]: 4, [name]: '' } },
    removeListener: [Function: off] { [length]: 2, [name]: 'off' },
    disconnect: [AsyncFunction] {
      [length]: 0,
      [name]: '',
      [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
    }
  },
  network_id: 1648837661374,
  verboseRpc: false,
  events: EventManager {
    emitter: Emittery {},
    subscriberAggregators: [
      SubscriberAggregator {
        subscribers: [
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [Subscriber],
          [length]: 7
        ]
      },
      [length]: 1
    ],
    initializationOptions: {
      config: TruffleConfig {
        _deepCopy: [ 'compilers', 'mocha', 'dashboard', 'networks', [length]: 4 ],
        _values: {
          truffle_directory: '/home/hayek/proj/truffle/packages/config',
          working_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy',
          network: 'decoder',
          networks: [Object],
          verboseRpc: false,
          gas: null,
          gasPrice: null,
          maxFeePerGas: null,
          maxPriorityFeePerGas: null,
          type: undefined,
          from: null,
          confirmations: 0,
          timeoutBlocks: 0,
          production: false,
          skipDryRun: false,
          build: null,
          resolver: [Resolver],
          artifactor: [Artifactor],
          quiet: true,
          dashboard: [Object],
          ethpm: [Object],
          ens: [Object],
          mocha: [Object],
          compilers: [Object],
          console: [Object],
          logger: [Object],
          contracts_build_directory: '/tmp/test--24435-jYB4bu0PiKWu',
          build_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/build',
          contracts_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/contracts',
          migrations_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/migrations',
          migrations_file_extension_regexp: /^\.(js|es6?)$/,
          test_directory: '/home/hayek/proj/truffle/packages/decoder/test/legacy/test',
          test_file_extension_regexp: /.*\.(js|ts|es|es6|jsx|sol)$/,
          example_project_directory: '/home/hayek/proj/truffle/packages/config/example'
        },
        events: [Circular],
        truffle_directory: [Getter/Setter],
        working_directory: [Getter/Setter],
        network: [Getter/Setter],
        networks: [Getter/Setter],
        verboseRpc: [Getter/Setter],
        build: [Getter/Setter],
        resolver: [Getter/Setter],
        artifactor: [Getter/Setter],
        dashboard: [Getter/Setter],
        ethpm: [Getter/Setter],
        logger: [Getter/Setter],
        compilers: [Getter/Setter],
        ens: [Getter/Setter],
        console: [Getter/Setter],
        mocha: [Getter/Setter],
        quiet: [Getter/Setter],
        build_directory: [Getter/Setter],
        contracts_directory: [Getter/Setter],
        contracts_build_directory: [Getter/Setter],
        migrations_directory: [Getter/Setter],
        migrations_file_extension_regexp: [Getter/Setter],
        test_directory: [Getter/Setter],
        test_file_extension_regexp: [Getter/Setter],
        example_project_directory: [Getter/Setter],
        network_id: [Getter/Setter],
        network_config: [Getter/Setter],
        from: [Getter/Setter],
        gas: [Getter/Setter],
        gasPrice: [Getter/Setter],
        maxFeePerGas: [Getter/Setter],
        maxPriorityFeePerGas: [Getter/Setter],
        type: [Getter/Setter],
        provider: [Getter/Setter],
        confirmations: [Getter/Setter],
        production: [Getter/Setter],
        timeoutBlocks: [Getter/Setter]
      },
      emitter: Emittery {}
    }
  },
  from: '0x17bEF25CAc1e7A9ffd7bAE942a9306F610Aaaea7'
}
    27) should decode overridden events & events inherited from abstract contracts


  7 passing (59s)
  27 failing

  1) Graceful degradation when information is missing
       Correctly degrades on allocation when no node:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ProjectDecoder.<anonymous> (lib/decoders.ts:191:23)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransaction (dist/decoders.js:137:16)
      at runTestBody (test/current/test/downgrade-test.js:520:34)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at Context.<anonymous> (test/current/test/downgrade-test.js:56:5)

  2) Graceful degradation when information is missing
       Correctly degrades on allocation when error:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ProjectDecoder.<anonymous> (lib/decoders.ts:191:23)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransaction (dist/decoders.js:137:16)
      at runTestBody (test/current/test/downgrade-test.js:520:34)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at Context.<anonymous> (test/current/test/downgrade-test.js:75:5)

  3) Graceful degradation when information is missing
       Correctly degrades on decoding when error:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ProjectDecoder.<anonymous> (lib/decoders.ts:191:23)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransaction (dist/decoders.js:137:16)
      at runTestBody (test/current/test/downgrade-test.js:520:34)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at Context.<anonymous> (test/current/test/downgrade-test.js:94:5)

  4) Graceful degradation when information is missing
       Correctly abifies after finishing:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ProjectDecoder.<anonymous> (lib/decoders.ts:191:23)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransaction (dist/decoders.js:137:16)
      at runTestBody (test/current/test/downgrade-test.js:520:34)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)
      at Context.<anonymous> (test/current/test/downgrade-test.js:98:5)

  5) Graceful degradation when information is missing
       Correctly decodes decimals:

      AssertionError: expected 'full' to equal 'abi'
      + expected - actual

      -full
      +abi
      
      at Context.<anonymous> (test/current/test/downgrade-test.js:159:12)

  6) Graceful degradation when information is missing
       Correctly decodes inherited events when no node:
     Error: header not found
      at BlockManager.number [as get] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/block-manager.js:196:15)
      at AccountManager.data [as getRaw] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:33:28)
      at AccountManager.getCode (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:73:15)

  7) Graceful degradation when information is missing
       Decodes transactions sent to the instance via additionalContexts:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ContractInstanceDecoder.<anonymous> (lib/decoders.ts:1570:38)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ContractInstanceDecoder.decodeTransaction (dist/decoders.js:1191:16)
      at Context.<anonymous> (test/current/test/downgrade-test.js:309:34)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  8) Graceful degradation when information is missing
       Decodes return values even with no deployedBytecode:

      AssertionError: expected [ Array(2) ] to have a length of 1 but got 2
      + expected - actual

      -2
      +1
      
      at Context.<anonymous> (test/current/test/downgrade-test.js:371:12)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  9) Graceful degradation when information is missing
       Out-of-range enums
         Doesn't include out-of-range enums in full mode:
     Error: header not found
      at BlockManager.number [as get] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/block-manager.js:196:15)
      at AccountManager.data [as getRaw] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:33:28)
      at AccountManager.getCode (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:73:15)

  10) Graceful degradation when information is missing
       Out-of-range enums
         Abifies correctly when failure occurs in first enum:
     Error: header not found
      at BlockManager.number [as get] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/block-manager.js:196:15)
      at AccountManager.data [as getRaw] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:33:28)
      at AccountManager.getCode (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:73:15)

  11) Graceful degradation when information is missing
       Out-of-range enums
         Abifies correctly when failure occurs in second enum:
     Error: header not found
      at BlockManager.number [as get] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/block-manager.js:196:15)
      at AccountManager.data [as getRaw] (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:33:28)
      at AccountManager.getCode (/home/hayek/proj/truffle/node_modules/ganache/dist/node/webpack:/Ganache/chains/ethereum/ethereum/lib/src/data-managers/account-manager.js:73:15)

  12) Graceful degradation when information is missing
       Custom errors
         Degrades correctly when no node:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  13) Graceful degradation when information is missing
       Custom errors
         Degrades correctly when no usedErrors:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  14) Graceful degradation when information is missing
       Custom errors
         Degrades correctly on no error node:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  15) Graceful degradation when information is missing
       Custom errors
         Degrades correctly on error:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  16) Non-function transactions
       should decode transactions that invoke fallback or receive:
     TypeError: Cannot read property 'blockNumber' of null
      at ProjectDecoder.<anonymous> (lib/decoders.ts:206:31)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransactionWithAdditionalContexts (dist/decoders.js:145:16)
      at ProjectDecoder.<anonymous> (lib/decoders.ts:191:23)
      at Generator.next (<anonymous>)
      at /home/hayek/proj/truffle/packages/decoder/dist/decoders.js:27:71
      at new Promise (<anonymous>)
      at __awaiter (dist/decoders.js:23:12)
      at ProjectDecoder.decodeTransaction (dist/decoders.js:137:16)
      at Context.<anonymous> (test/current/test/receive-test.js:61:41)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  17) Over-the-wire decoding
       should correctly decode transactions and events:
     Error: Timeout of 2000ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves. (/home/hayek/proj/truffle/packages/decoder/test/current/test/wire-test.js)
      at listOnTimeout (internal/timers.js:554:17)
      at processTimers (internal/timers.js:497:7)

  18) Over-the-wire decoding
       disambiguates events when possible and not when impossible:

      AssertionError: expected [] to have a length of 1 but got 0
      + expected - actual

      -0
      +1
      
      at Context.<anonymous> (test/current/test/wire-test.js:596:12)

  19) Over-the-wire decoding
       Handles anonymous events:

      AssertionError: expected [] to have a length of 4 but got 0
      + expected - actual

      -0
      +4
      
      at Context.<anonymous> (test/current/test/wire-test.js:739:12)

  20) Over-the-wire decoding
       respects the extras option:

      AssertionError: expected [] to have a length of 1 but got 0
      + expected - actual

      -0
      +1
      
      at Context.<anonymous> (test/current/test/wire-test.js:916:12)

  21) Over-the-wire decoding
       Decodes return values:

      AssertionError: expected [ Array(2) ] to have a length of 1 but got 2
      + expected - actual

      -2
      +1
      
      at Context.<anonymous> (test/current/test/wire-test.js:959:12)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  22) Over-the-wire decoding
       Decodes return values when given superclass:

      AssertionError: expected [ Array(2) ] to have a length of 1 but got 2
      + expected - actual

      -2
      +1
      
      at Context.<anonymous> (test/current/test/wire-test.js:1027:12)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  23) Over-the-wire decoding
       Custom error decoding
         Decodes unambiguous custom errors:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  24) Over-the-wire decoding
       Custom error decoding
         Decodes unambiguous custom errors from external calls:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  25) Over-the-wire decoding
       Custom error decoding
         Decodes ambiguous custom errors:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  26) Over-the-wire decoding
       Custom error decoding
         Decodes ambiguous custom errors from external calls:
     TypeError: Cannot read property 'toTwos' of undefined
      at Object.toBytes (/home/hayek/proj/truffle/packages/codec/lib/conversion.ts:195:17)
      at ContractDecoder.<anonymous> (lib/decoders.ts:831:30)
      at Generator.next (<anonymous>)
      at fulfilled (dist/decoders.js:24:58)
      at runMicrotasks (<anonymous>)
      at processTicksAndRejections (internal/process/task_queues.js:97:5)

  27) Over-the-wire decoding (legacy features)
       should decode overridden events & events inherited from abstract contracts:

      AssertionError: expected [] to have a length of 5 but got 0
      + expected - actual

      -0
      +5
      
      at Context.<anonymous> (test/legacy/test/wire-test.js:61:12)



info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
