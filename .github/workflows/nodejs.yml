name: Node CI

on:
  push:
    branches:
    # long-lived branches
    - master
    - develop
    - next

  pull_request:
    branches:
      - "*"

permissions:
  contents: read

jobs:
  yarncheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm install -g yarn
      - run: yarn install --ignore-scripts --ignore-engines
      - run: test -z "$(git diff)" || (echo 'Please run yarn and commit all changes to yarn.lock'; false)

  build:
    needs: yarncheck
    strategy:
      matrix:
        platform: [ubuntu-latest]
        node-version: [14.x, 16.x, 18.x]
        env: [GETH=true, PACKAGES=true, INTEGRATION=true]
    runs-on: ${{ matrix.platform }}

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm install -g yarn

    - name: Restore lerna
      id: cache-lerna
      uses: actions/cache@v3
      with:
        # recursively cache all node_modules/ folders
        path: |
          node_modules
          */*/node_modules
        # hash includes only the top level yarn.lock under source control
        key: test-${{ runner.os }}-${{ matrix.node-version }}-${{ hashfiles('yarn.lock') }}

    - name: Bootstrap
      id: bootstrap
      run: yarn bootstrap
      if: steps.cache-lerna.outputs.cache-hit != 'true'

    - name: Generated File Check
      run: test -z "$(git diff)" || (echo 'Did you check in a generated file to source control?  Please remove it if so'; false)
      if: steps.cache-lerna.outputs.cache-hit != 'true'

    # build, transpile and create artifacts in dist/
    - name: Build packages and webpack, from cache
      run: $(yarn bin)/lerna run prepare --stream
      if: steps.bootstrap.conclusion == 'skipped'

    - name: Dependency Check
      run: yarn depcheck
    
    - run: ${{ matrix.env }} yarn ci
      env:
        CI: true
